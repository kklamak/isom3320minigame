import javafx.scene.image.*;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.scene.media.*;
import javafx.util.Duration;

class Enemy {
  // HP value
  private DoubleProperty hpValueProperty;
  private double hpValue = 100;
  
  // Image
  private ImageView enemyImageView;
  
  // Sound when angry
  MediaPlayer angrySoundEffect = new MediaPlayer(new Media(getClass().getResource("media/angry.mp3").toString()));
  
  // Create enemy with default image
  Enemy() {
    this("image/enemy.png");
  }
  
  // Create enemy with image uploaded
  Enemy(String urlEnemyImage) {
    enemyImageView = new ImageView(new Image(urlEnemyImage));
  }
  
  // ---------------------- Get properties ----------------------
  // Get HP value
  public double getHpValue() {
    return hpValue;
  }
  
  // Get HP value Property
  public DoubleProperty gethpValueProperty() {
    this.hpValueProperty = new SimpleDoubleProperty(this, "hpValueProperty", hpValue);
    return hpValueProperty;
  }
  
  // Get image
  public ImageView getEnemyImageView() {
    return enemyImageView;
  }
  
  // ---------------------- Set properties ----------------------
  // Set image
  public void setEnemyImage(String urlEnemyImage) {
    enemyImageView = new ImageView(new Image(urlEnemyImage, 320, 320, false, false));
  }
  
  // Minus HP value with weapon's damage
  public void minusHp(int damage) {
    hpValue = hpValue - damage;
  }
  
  // Check whether enemy is dead/killed
  public boolean isDead() {
    if (hpValue <= 0)
      return true;
    return false;
  }
  
  // Recovery 20% hpValue when enemy reaches angry stage
  class EnemyRecovery implements Runnable {
    @Override
    public void run() {
      double newValue = hpValue * 1.2;
      if (newValue <= 100) {
        hpValue = newValue;
        hpValueProperty = new SimpleDoubleProperty(this, "hpValueProperty", hpValue);
        angrySoundEffect.seek(Duration.ZERO);
        angrySoundEffect.play();
      }
    }
  }
}
